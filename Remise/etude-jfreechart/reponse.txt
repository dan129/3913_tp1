Suite au génération de tropcomp sur le projet jfreechart pour les seuils 1%, 5% et 10% , on constate que dans les seuils de 1% et 5% nous ne retrouvons aucune classe suspecte et dans le seuil de 10% nous retrouvons une seule classe suspecte. Avec aucune classe suspecte trouvée aux seuils de 1% et 5%, cela indique qu'en général les classes sont bien conçues avec un bon rapport de lignes de code par rapport aux nombres d'assertions. Donc, on fait une bonne évaluation des classes. On commence à avoir trouver une classe suspecte à partir du seuil de 10% ce qui est normal et assez bon car plus qu'on augment le seuil, plus qu'on aura des classes suspectes. Si on reagarde le seuil de 10%, on voit que la classe "BoxAndWhiskerRendererTest.java" possède un TCMP assez elevé, ce qui veut dire qu'on ne test pas assez le code par rapport au tloc ou bien il y a de la répétition de code. La solution serait de regarder s'il y a des parties du code qui n'ont pas été testés (augmenter le tassert) ou bien s'il est possible d'optimiser le code et ainsi diminuer le tloc. En général, on peut dire que les tests du projet jfreechart sont assez bien conçus avec un bon rapport tloc et tcmp.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

À priori,
TLOC et TASSERT sont tous deux des métriques par rapport à la taille et comme vu en classe la taille est une bonne métriques pour juger de la complexité du code. Bien que TLOC et TASSERT sont deux influencés par des points externes tel que le style du code du developpeur. Ces métriques peuvent être de bonnes métriques a regarder surtout si on prend en compte leur simplicité. Vu que TLOC et TASSERT sont tous deux métriques par rapport à la taille on s'attend normalement à ce que ces métriques augmentent à fur et à mesure que la complexité du code augmente. Donc, TCMP (TLOC\TASSERT) est bonne métrique pour pouvoir identifier du code potentiellement anormalement complex (grande taille et peut de test). Le seuil pour identifier les classes avec les métriques plus élevé semble être un bonne idée.

Après avoir test l'heuristiques sur le projet JFreechart,
L'heuristique ne nous permet pas d'avoir les classes potentiellement problématique du projet Jfreechart. 
Première problématique avec l'heuristique est pouvoir identifier un seuil significatif. La métrique du seuil est un élément clé de l'heuristique proposé. Si le seuil est trop faible potentiel de manquer des classes problématiques et un seuil trop grand aurait l'effet opposer. C'est-à-dire que trop de classes test seraient identifier comme suspectes. Trouver un bon seuil sembler être une grande difficulté puisque le seuil doit prendre en considération les particularités du projet qu'on tente analyser. Lorsque qu'on applique le seuil fournit par l'énoncer 1% et 5% nous donne aucun résultat et 10% 1 résultat.
Deuxième problématique de l'heuristique est dans la méthode identification du classe test suspecte. Comme expliquer dans le paragraphe sur les métriques, TCMP est un bonne métrique pour identifier une classe potentiellement trop complex. Cenpendant, TLOC est seulement une métrique pour juger de la complexite de la classe (similaire a une échelle ordinale plus TLOC est grand, plus on peut assumer la complexité du code) et on ne peut faire de jugement par rapport si la classe test est anormalement complex ou pas. Donc le fait qu'une classe est suspecte si elle se trouve dans les seuils supérieures de tous le projet pour TLOC ET TCMP ne fait pas sens. Si on regarde les données fournit par tls sans l'application de cette heuristique, on se rend compte que le TCMP de la classe comme identifier comme seul suspecte (apres avoir appliquer les seuil 1%,5% et 10%) est de 9.675 alors que TCMP pour la classe ayant TCMP max est de 43.5 avec plusieur classes avec des TCMP aulentour de 20. On se rend rapidement compte que l'heuristique proposé ne fonctionne pas pour TLOC les plus faible ayant des TCMP élevé.

Possibilité d'amélioration:
Comme expliquer précédamment le TLOC d'une classe test n'est pas suffisant pour pouvoir déterminé si une classe test est anormalement complex. Cependant, si on compare le TLOC de la classe test au TLOC de la classe testé. Alors cette nouvelle métrique nous permet identifiée du code potentiellement anormalement complex et si remplacerait le TLOC par cette nouvelle métrique dans l'identification d'une classe suspecte. Alors l'efficacité de notre euristique serait grandement améliorer    
 