Suite au génération de tropcomp sur le projet jfreechart pour les seuils 1%, 5% et 10% , on constate que dans les seuils de 1% et 5% nous ne retrouvons aucune classe suspecte et dans le seuil de 10% nous retrouvons une seule classe suspecte. Avec aucune classe suspecte trouvée aux seuils de 1% et 5%, cela indique qu'en général les classes sont bien conçues avec un bon rapport de lignes de code par rapport aux nombres d'assertions. Donc, on fait une bonne évaluation des classes. On commence à avoir trouver une classe suspecte à partir du seuil de 10% ce qui est normal et assez bon car plus qu'on augment le seuil, plus qu'on aura des classes suspectes. Si on reagarde le seuil de 10%, on voit que la classe "BoxAndWhiskerRendererTest.java" possède un TCMP assez elevé, ce qui veut dire qu'on ne test pas assez le code par rapport au tloc ou bien il y a de la répétition de code. La solution serait de regarder s'il y a des parties du code qui n'ont pas été testés (augmenter le tassert) ou bien s'il est possible d'optimiser le code et ainsi diminuer le tloc. En général, on peut dire que les tests du projet jfreechart sont assez bien conçus avec un bon rapport tloc et tcmp.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

À priori,
TLOC et TASSERT sont tous deux des métriques par rapport à la taille et comme vu en classe la taille est une bonne métrique pour juger la complexité du code. Bien que TLOC et TASSERT sont les deux influencés par des points externes tel que le style du code du developpeur. Ces métriques peuvent être bonnes à regarder surtout si on prend en compte leur simplicité. Vu que TLOC et TASSERT sont des métriques en lien avec la taille, on s'attend normalement à ce que ces métriques augmentent à fur et à mesure que la complexité du code augmente. Donc, TCMP (TLOC\TASSERT) est une bonne métrique pour pouvoir identifier du code potentiellement anormalement complexe (grande taille et peu de tests). Le seuil pour identifier les classes avec les métriques les plus élevés semble être une bonne idée.

Après avoir testé l'heuristique sur le projet JFreechart, celle-ci ne nous permet pas de voir les classes potentiellement problématiques du projet Jfreechart. 

La première problématique avec l'heuristique est de pouvoir identifier un seuil significatif. La métrique du seuil est un élément clé de l'heuristique proposée. Si le seuil est trop faible, il y a un potentiel de manquer des classes problématiques et un seuil trop élevé aurait l'effet opposé. C'est-à-dire que trop de classes de test seraient identifiés en tant que suspectes. Trouver un bon seuil semble être une grande difficulté puisque le seuil doit prendre en considération les particularités du projet qu'on tente d'analyser. Lorsque qu'on applique le seuil fournit par l'énoncé à 1% et 5%, cela nous donne aucun résultat tandis qu'à un seuil de 10%, nous avons 1 résultat.

La deuxième problématique de l'heuristique est dans la méthode d'identification de la classe test suspecte. Tel qu'expliqué dans le paragraphe sur les métriques, TCMP est un bonne métrique pour identifier une classe potentiellement trop complexe. Cenpendant, TLOC est seulement une métrique pour juger de la complexité de la classe (similaire à une échelle ordinale, plus que TLOC est grand, plus qu'on peut assumer la complexité du code) et on ne peut pas faire de jugement par rapport à la classe test pour savoir si elle est anormalement complexe ou pas. Donc, ça ne fait pas de sens de dire qu'une classe est suspecte si elle se trouve dans les seuils supérieurs de toutes les autres classes du projet pour TLOC ET TCMP. Si on regarde les données fournies par TLS sans l'application de cette heuristique, on se rend compte que le TCMP de la seule classe suspecte trouvée (apres avoir appliquer les seuil 1%,5% et 10%) est de 9.675 alors que les réponses du simple TLS nous montre qu'on a dans le projet une classe avec un TCMP maximal de 43.5 et plusieurs classes avec des TCMP proche de 20. Ce qui est nettement plus élevé que le 9.675 trouvé et on se rend compte que l'heuristique proposé ne fonctionne pas pour les classes avec des TLOC faibles et des TCMP élevés.

Possibilité d'amélioration:
Tel qu'expliqué précédemment le TLOC d'une classe test n'est pas suffisant pour déterminer si celle-ci est anormalement complexe. Cependant, si on compare le TLOC de la classe test au TLOC de la classe testée, cette nouvelle métrique nous permettra d'identifier du code potentiellement anormalement complexe si on l'utilise à la place du simple TLOC. Alors, l'efficacité de cette nouvelle heuristique serait grandement améliorée.    
 